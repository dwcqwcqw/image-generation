#!/usr/bin/env python3\n\"\"\"\n换脸路径配置测试脚本\n专门测试路径查找和模型检测逻辑\n\"\"\"\n\nimport os\nimport sys\n\n# 添加当前目录到路径\ncurrent_dir = os.path.dirname(os.path.abspath(__file__))\nif current_dir not in sys.path:\n    sys.path.insert(0, current_dir)\n\ndef test_faceswap_path_detection():\n    \"\"\"测试faceswap路径检测\"\"\"\n    print(\"🔍 测试faceswap路径检测功能...\")\n    \n    possible_paths = [\n        \"/runpod-volume/faceswap\",  # RunPod主要路径\n        \"/Users/baileyli/Documents/AI同志项目/image generation/faceswap\",  # 本地开发\n        \"/app/faceswap\",  # Docker容器\n        \"/workspace/faceswap\",  # RunPod备用\n        \"../faceswap\",  # 相对路径\n        \"./faceswap\"  # 当前目录\n    ]\n    \n    print(\"📁 检查可能的faceswap路径:\")\n    found_paths = []\n    for path in possible_paths:\n        exists = os.path.exists(path)\n        status = \"✅\" if exists else \"❌\"\n        print(f\"  {status} {path}\")\n        if exists:\n            found_paths.append(path)\n    \n    if found_paths:\n        print(f\"\\n✅ 找到 {len(found_paths)} 个有效路径\")\n        return found_paths[0]  # 返回第一个找到的路径\n    else:\n        print(\"\\n❌ 未找到任何有效的faceswap路径\")\n        return None\n\ndef test_model_files_detection(base_path):\n    \"\"\"测试模型文件检测\"\"\"\n    print(f\"\\n🔍 测试模型文件检测 (基路径: {base_path})...\")\n    \n    if not base_path or not os.path.exists(base_path):\n        print(\"❌ 基路径不存在，无法检测模型文件\")\n        return False\n    \n    model_files = {\n        \"face_swap\": \"inswapper_128_fp16.onnx\",\n        \"face_enhance\": \"GFPGANv1.4.pth\", \n        \"face_analysis\": \"buffalo_l\"\n    }\n    \n    all_found = True\n    print(\"📄 检查模型文件:\")\n    \n    for model_type, filename in model_files.items():\n        full_path = os.path.join(base_path, filename)\n        exists = os.path.exists(full_path)\n        status = \"✅\" if exists else \"❌\"\n        print(f\"  {status} {model_type}: {filename}\")\n        if exists:\n            # 显示文件大小\n            try:\n                size = os.path.getsize(full_path)\n                size_mb = size / (1024 * 1024)\n                print(f\"      文件大小: {size_mb:.1f} MB\")\n            except Exception as e:\n                print(f\"      无法获取文件大小: {e}\")\n        if not exists:\n            all_found = False\n    \n    return all_found\n\ndef search_model_files_recursively():\n    \"\"\"递归搜索模型文件\"\"\"\n    print(\"\\n🔍 递归搜索换脸模型文件...\")\n    \n    search_keywords = [\"inswapper\", \"buffalo\", \"gfpgan\"]\n    search_roots = [\"/runpod-volume\", \"/workspace\", \"/app\", \".\", \"..\"]\n    \n    found_files = []\n    \n    for root in search_roots:\n        if not os.path.exists(root):\n            continue\n            \n        print(f\"📁 搜索目录: {root}\")\n        try:\n            for dirpath, dirnames, filenames in os.walk(root):\n                for filename in filenames:\n                    for keyword in search_keywords:\n                        if keyword.lower() in filename.lower():\n                            full_path = os.path.join(dirpath, filename)\n                            print(f\"  🔍 找到: {full_path}\")\n                            found_files.append(full_path)\n                            break\n        except Exception as e:\n            print(f\"  ❌ 搜索失败: {e}\")\n    \n    return found_files\n\ndef test_handler_integration():\n    \"\"\"测试handler集成\"\"\"\n    print(\"\\n🔍 测试handler集成...\")\n    \n    try:\n        import handler\n        print(\"✅ handler模块导入成功\")\n        \n        # 测试换脸路径函数\n        if hasattr(handler, 'add_faceswap_path'):\n            print(\"✅ add_faceswap_path函数存在\")\n            result = handler.add_faceswap_path()\n            print(f\"📝 路径检测结果: {result}\")\n        else:\n            print(\"❌ add_faceswap_path函数不存在\")\n        \n        # 测试模型配置函数\n        if hasattr(handler, 'get_face_swap_models_config'):\n            print(\"✅ get_face_swap_models_config函数存在\")\n            config = handler.get_face_swap_models_config()\n            print(\"📝 模型配置:\")\n            for key, path in config.items():\n                exists = os.path.exists(path)\n                status = \"✅\" if exists else \"❌\"\n                print(f\"  {status} {key}: {path}\")\n        else:\n            print(\"❌ get_face_swap_models_config函数不存在\")\n        \n        # 测试换脸可用性检查\n        if hasattr(handler, 'is_face_swap_available'):\n            print(\"\\n✅ is_face_swap_available函数存在\")\n            print(\"🔄 执行换脸可用性检查...\")\n            is_available = handler.is_face_swap_available()\n            print(f\"📝 换脸功能可用: {is_available}\")\n        else:\n            print(\"❌ is_face_swap_available函数不存在\")\n        \n        return True\n        \n    except Exception as e:\n        print(f\"❌ handler测试失败: {e}\")\n        import traceback\n        print(f\"📝 错误详情: {traceback.format_exc()}\")\n        return False\n\ndef main():\n    \"\"\"主测试函数\"\"\"\n    print(\"🚀 换脸路径配置测试开始\")\n    print(\"=\"*60)\n    \n    # 1. 测试路径检测\n    found_path = test_faceswap_path_detection()\n    \n    # 2. 测试模型文件检测\n    if found_path:\n        test_model_files_detection(found_path)\n    else:\n        print(\"\\n⚠️ 跳过模型文件检测（未找到基路径）\")\n    \n    # 3. 递归搜索\n    search_model_files_recursively()\n    \n    # 4. 测试handler集成\n    test_handler_integration()\n    \n    print(\"\\n\" + \"=\"*60)\n    print(\"🎉 测试完成\")\n\nif __name__ == \"__main__\":\n    main() 